# Production Dockerfile for Next.js Frontend
# This file is specifically for production builds

# Base stage with Node.js and pnpm
FROM node:20-alpine AS base

# Install system dependencies
RUN apk add --no-cache \
    curl \
    libc6-compat \
    && corepack enable \
    && corepack prepare pnpm@latest --activate

WORKDIR /app

# Set environment variables
ENV NEXT_TELEMETRY_DISABLED=1 \
    NODE_ENV=production

# Dependencies stage
FROM base AS deps

# Copy package files
COPY package.json package-lock.json* pnpm-lock.yaml* yarn.lock* ./

# Install dependencies based on the preferred package manager
RUN \
  if [ -f yarn.lock ]; then yarn install --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci --include=dev; \
  elif [ -f pnpm-lock.yaml ]; then pnpm install --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Builder stage for production
FROM base AS builder

# Copy node_modules from deps stage
COPY --from=deps /app/node_modules ./node_modules

# Copy application code
COPY . .

# Set build-time environment variables
ENV NODE_ENV=production \
    NEXT_TELEMETRY_DISABLED=1

# Build the application
RUN \
  if [ -f yarn.lock ]; then yarn build; \
  elif [ -f package-lock.json ]; then npm run build; \
  elif [ -f pnpm-lock.yaml ]; then pnpm build; \
  else npm run build; \
  fi

# Production stage
FROM base AS production

# Create nextjs user for production
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 --ingroup nodejs nextjs

# Install curl for health checks
RUN apk add --no-cache curl

# Create app directories
RUN mkdir -p /app/.next/cache && \
    chown -R nextjs:nodejs /app

WORKDIR /app

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/next.config.* ./
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/package.json ./

# Create startup script for production
RUN printf '#!/bin/sh\n\
set -e\n\
\n\
echo "=== Next.js Production Startup ==="\n\
echo "Environment: $NODE_ENV"\n\
echo "Build ID: $(cat .next/BUILD_ID 2>/dev/null || echo "unknown")"\n\
echo "Starting Next.js server..."\n\
\n\
# Start the application\n\
exec node server.js\n\
' > /app/start.sh && \
    chmod +x /app/start.sh && \
    chown nextjs:nodejs /app/start.sh

USER nextjs

EXPOSE 3000

# Production health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:3000/api/health || exit 1

# Environment variables for runtime
ENV PORT=3000 \
    HOSTNAME="0.0.0.0"

CMD ["/app/start.sh"]