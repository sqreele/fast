version: '3.8'
services:
  fastapi:
    build: ./backend
    container_name: fastapi_app
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://pm_user:pm_password@pm_postgres_db:5432/pm_database
      - SECRET_KEY=your-secret-key-here
    depends_on:
      pm_postgres_db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  pm_postgres_db:
    image: postgres:15
    container_name: pm_postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: pm_database
      POSTGRES_USER: pm_user
      POSTGRES_PASSWORD: pm_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "15432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pm_user -d pm_database"]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer:latest
    container_name: pm_adminer
    restart: unless-stopped
    ports:
      - "8081:8080"
    depends_on:
      pm_postgres_db:
        condition: service_healthy

  frontend:
    build: ./frontend
    container_name: nextjs_frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXTAUTH_URL=http://localhost
      - NEXTAUTH_SECRET=your-nextauth-secret-key-change-in-production
      - BACKEND_URL=http://fastapi:8000
      - NEXT_PUBLIC_BACKEND_URL=http://localhost/api/v1
    ports:
       - "3000:3000"
    depends_on:
      - fastapi
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  nginx:
    build: ./nginx
    container_name: pm_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      fastapi:
        condition: service_healthy
      frontend:
        condition: service_healthy
    volumes:
      - ./nginx/ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/ || exit 1"]  # Changed from /health to /
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s  # Increased start period to wait for dependencies

volumes:
  postgres_data:
